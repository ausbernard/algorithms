"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""
import time

def problem2_Fibonacci(idx):
    tic = time.perf_counter()
    full_seq = [0,1]
    for num in range(idx):
        full_seq.append(full_seq[-1] + full_seq[-2])
    
    sum_of_elements = 0
    for i in full_seq:
        if i % 2 == 0:
            sum_of_elements = sum_of_elements + i
    toc = time.perf_counter()
    print(f"Your fibonacci algo took: {toc - tic:0.9f} seconds")
    
    return sum_of_elements

# def problem2_Begoner():
#     tic = time.perf_counter()
#     x = y = 1
#     sum = 0
#     while (sum < 4000000):
#         sum += (x + y)
#         x, y = x + 2 * y, 2 * x + 3 * y
#     toc = time.perf_counter()
#     print(f"Begoner algo took: {toc - tic:0.9f} seconds")
    
#     return sum

if __name__ == '__main__':
    sum1 = problem2_Fibonacci(32)

  

 
    

    