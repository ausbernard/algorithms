"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""
import time
from functools import lru_cache

def fibonacci(idx):
    tic = time.perf_counter()
    full_seq = [0,1]
    for num in range(idx):
        full_seq.append(full_seq[-1] + full_seq[-2])
    
    sum_of_elements = 0
    for i in full_seq:
        if i % 2 == 0:
            sum_of_elements = sum_of_elements + i
    toc = time.perf_counter()
    print(f"Your fibonacci algo took: {toc - tic:0.9f} seconds")
    
    return sum_of_elements

# learned memoization - pretty cool

# fibonacci_cache = {}
@lru_cache(maxsize=1000)
def fibonacci_memo(n):
    tic = time.perf_counter()
    summ = 0
    # # if we have cached the value, return it
    # if n in fibonacci_cache:
    #     return fibonacci_cache[n]
    # Compute Nth term
    if n == 1:
        summ += 1
        return 1
    elif n == 2:
        summ += 1
        return 1
    elif n > 2:
        return fibonacci_memo(n-1) + fibonacci_memo(n-2)
    
    # # Cache the value and return it
    # fibonacci_cache[n] = value
    # return value


if __name__ == '__main__':
    fibonacci(32)

  

 
    

    